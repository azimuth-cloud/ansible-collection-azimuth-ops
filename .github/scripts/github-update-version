#!/usr/bin/env python3

import argparse
import os
import urllib.parse

import requests
from ruamel.yaml import YAML


parser = argparse.ArgumentParser(
    description = (
        "Updates the version of a release artefact in a GitHub repository "
        "to the latest release."
    )
)
parser.add_argument("path", help = "The path of the file to find the repo variable in.")
parser.add_argument("repo_variable", help = "The variable containing the GitHub repo.")
parser.add_argument("version_variable", help = "The variable containing the version.")
args = parser.parse_args()


yaml = YAML(typ = "rt")
yaml.explicit_start = True
yaml.preserve_quotes = True
yaml.width = 1000000
yaml.mapping_indent = 2
yaml.sequence_indent = 4
yaml.sequence_dash_offset = 2

with open(args.path) as fh:
    data = yaml.load(fh)

# Get the latest version from the GitHub API
# The Git repository URL is stored in the variable
# We need to extract the <org>/<repo> part
repo_url = data[args.repo_variable]
repo = urllib.parse.urlsplit(repo_url).path.removeprefix("/")
api_url = f"https://api.github.com/repos/{repo}/releases/latest"
response = requests.get(api_url)
response.raise_for_status()
next_version = data[args.version_variable] = response.json()["tag_name"]

with open(args.path, "w") as fh:
    yaml.dump(data, fh)

# Output the next version so it can be consumed by later steps
output_path = os.environ.get("GITHUB_OUTPUT", "/dev/stdout")
with open(output_path, "a") as fh:
    print(f"next-version={next_version}", file = fh)
