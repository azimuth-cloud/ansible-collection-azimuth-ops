---

#####
# These tasks deploy a Prometheus scrape config and a Grafana for showing
# cloud metrics
#
# The Grafana is exposed externally, protected by Azimuth authentication in
# the ingress
#
# The Prometheus scrape targets the Prometheus that is monitoring OpenStack,
# and is currently only confirmed to work with Kolla-Ansible based installations
#
# It is separate to the Prometheus and Grafana that provides metrics for
# the Azimuth installation itself
#####

- name: Create Grafana release namespace
  command: kubectl create namespace {{ cloud_metrics_grafana_release_namespace }}
  register: cloud_metrics_grafana_create_namespace
  changed_when: cloud_metrics_grafana_create_namespace.rc == 0
  failed_when: >-
    cloud_metrics_grafana_create_namespace.rc != 0 and
    'AlreadyExists' not in cloud_metrics_grafana_create_namespace.stderr

- name: Install auth secret for remote Prometheus
  command: kubectl apply -f -
  args:
    stdin: "{{ cloud_metrics_prometheus_auth_secret_definition | to_nice_yaml }}"
  vars:
    cloud_metrics_prometheus_auth_secret_definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ cloud_metrics_prometheus_auth_secret_name }}"
        namespace: "{{ cloud_metrics_grafana_release_namespace }}"
      stringData: "{{ cloud_metrics_prometheus_auth_data }}"

- name: Install headless service for remote Prometheus
  command: kubectl apply -f -
  args:
    stdin: "{{ cloud_metrics_prometheus_service_definition | to_nice_yaml }}"
  vars:
    cloud_metrics_prometheus_service_definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: "{{ cloud_metrics_prometheus_service_name }}"
        namespace: "{{ cloud_metrics_grafana_release_namespace }}"
        labels: "{{ cloud_metrics_prometheus_service_labels }}"
      spec:
        type: ClusterIP
        ports:
          - name: metrics
            port: "{{ cloud_metrics_prometheus_port }}"
            targetPort: "{{ cloud_metrics_prometheus_port }}"

- name: Install endpoints for remote Prometheus
  command: kubectl apply -f -
  args:
    stdin: "{{ cloud_metrics_prometheus_endpoints_definition | to_nice_yaml }}"
  vars:
    cloud_metrics_prometheus_endpoints_definition:
      apiVersion: v1
      kind: Endpoints
      metadata:
        name: "{{ cloud_metrics_prometheus_service_name }}"
        namespace: "{{ cloud_metrics_grafana_release_namespace }}"
      subsets:
        - addresses:
            - ip: "{{ cloud_metrics_prometheus_ip }}"
          ports:
            - name: metrics
              port: "{{ cloud_metrics_prometheus_port }}"

- name: Install servicemonitor for remote Prometheus
  command: kubectl apply -f -
  args:
    stdin: "{{ cloud_metrics_prometheus_servicemonitor_definition | to_nice_yaml }}"
  vars:
    cloud_metrics_prometheus_servicemonitor_definition:
      apiVersion: monitoring.coreos.com/v1
      kind: ServiceMonitor
      metadata:
        name: "{{ cloud_metrics_prometheus_servicemonitor_name }}"
        namespace: "{{ cloud_metrics_grafana_release_namespace }}"
      spec: "{{ cloud_metrics_prometheus_servicemonitor_spec }}"

- name: Install wildcard TLS certificate
  command: kubectl apply -f -
  args:
    stdin: "{{ cloud_metrics_grafana_ingress_tls_secret_definition | to_nice_yaml }}"
  vars:
    cloud_metrics_grafana_ingress_tls_secret_definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ cloud_metrics_grafana_ingress_tls_secret_name }}"
        namespace: "{{ cloud_metrics_grafana_release_namespace }}"
      type: kubernetes.io/tls
      stringData:
        tls.crt: "{{ cloud_metrics_grafana_ingress_tls_certificate }}"
        tls.key: "{{ cloud_metrics_grafana_ingress_tls_key }}"
  when: cloud_metrics_grafana_ingress_tls_certificate

- name: Install Grafana admin password secret
  command: kubectl apply -f -
  args:
    stdin: "{{ cloud_metrics_grafana_admin_secret_definition | to_nice_yaml }}"
  vars:
    cloud_metrics_grafana_admin_secret_definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ cloud_metrics_grafana_admin_secret_name }}"
        namespace: "{{ cloud_metrics_grafana_release_namespace }}"
      stringData: >-
        {{-
          {
            cloud_metrics_grafana_admin_secret_user_key: cloud_metrics_grafana_admin_username,
            cloud_metrics_grafana_admin_secret_password_key: cloud_metrics_grafana_admin_password,
          }
        }}

- name: Install Grafana on target Kubernetes cluster
  kubernetes.core.helm:
    chart_ref: "{{ cloud_metrics_grafana_chart_name }}"
    chart_repo_url: "{{ cloud_metrics_grafana_chart_repo }}"
    chart_version: "{{ cloud_metrics_grafana_chart_version }}"
    release_namespace: "{{ cloud_metrics_grafana_release_namespace }}"
    release_name: "{{ cloud_metrics_grafana_release_name }}"
    release_values: "{{ cloud_metrics_grafana_release_values }}"
    atomic: yes
    create_namespace: yes
    wait: yes
    wait_timeout: "{{ cloud_metrics_grafana_wait_timeout }}"

- name: Set Grafana dashboard URL facts
  set_fact:
    cloud_metrics_grafana_home_dashboard_url: >-
      {{-
        "{scheme}://{host}{subpath}/d/{dashboard_uid}?kiosk=tv".format(
          scheme = "https" if cloud_metrics_grafana_ingress_tls_enabled else "http",
          host = cloud_metrics_grafana_ingress_host,
          subpath = cloud_metrics_grafana_ingress_subpath,
          dashboard_uid = cloud_metrics_grafana_home_dashboard_uid
        )
      }}
    cloud_metrics_grafana_tenant_dashboard_url_template: >-
      {{-
        "{scheme}://{host}{subpath}/d/{dashboard_uid}?kiosk=tv&var-{tenant_var}={{tenant_id}}".format(
          scheme = "https" if cloud_metrics_grafana_ingress_tls_enabled else "http",
          host = cloud_metrics_grafana_ingress_host,
          subpath = cloud_metrics_grafana_ingress_subpath,
          dashboard_uid = cloud_metrics_grafana_tenant_dashboard_uid,
          tenant_var = cloud_metrics_grafana_tenant_id_var
        )
      }}
