---

# The chart to use
zenith_chart_repo: https://azimuth-cloud.github.io/zenith
zenith_chart_name: zenith-server
zenith_chart_version: 0.13.0

# Release information for the Zenith release
# Use the same namespace as the Azimuth release by default
zenith_release_namespace: "{{ azimuth_release_namespace | default('azimuth') }}"
zenith_release_name: zenith-server

# The timeout to wait for Zenith to become ready
zenith_wait_timeout: 10m

# Custom trust bundle for SSL verification
zenith_trust_bundle: "{{ system_trust_ca_bundle | default('') }}"

# Ingress settings
#   The base domain for Zenith ingress resources
zenith_ingress_base_domain: >-
  {{-
    ingress_base_domain
    if ingress_base_domain is defined
    else undef(hint = 'zenith_ingress_base_domain is required')
  }}
#   Annotations for Zenith ingress resources
zenith_ingress_annotations: "{{ ingress_annotations | default({}) }}"
#   The subdomain to use for the registrar ingress resource
zenith_ingress_registrar_subdomain: "{{ ingress_zenith_registrar_subdomain | default('registrar') }}"
#   Indicates whether TLS should be enabled
zenith_ingress_tls_enabled: "{{ ingress_tls_enabled | default(True) }}"
#   The TLS secret name (can be null)
zenith_ingress_tls_secret_name: "{{ ingress_tls_secret_name | default(None) }}"
#   Any TLS-specific annotations
zenith_ingress_tls_annotations: "{{ ingress_tls_annotations | default({}) }}"
#   Wildcard TLS certificate, if available
zenith_ingress_tls_wildcard_certificate: "{{ ingress_tls_wildcard_certificate | default(None) }}"
zenith_ingress_tls_wildcard_key: >-
  {{-
    ingress_tls_wildcard_key
    if ingress_tls_wildcard_key is defined
    else undef(hint = 'zenith_ingress_tls_wildcard_key is required')
  }}

# The signing key for Zenith subdomain tokens
zenith_registrar_subdomain_token_signing_key: "{{ undef(hint = 'zenith_registrar_subdomain_token_signing_key is required') }}"
# List of subdomains that are reserved and cannot be requested via Zenith
# Note that the registrar subdomain is always added to this list
# Make sure all the subdomains we are using are reserved
zenith_registrar_reserved_subdomains: >-
  {{-
    [
      ingress_azimuth_portal_subdomain | default(None),
      ingress_zenith_registrar_subdomain | default(None),
      ingress_harbor_core_subdomain | default(None),
      ingress_harbor_notary_subdomain | default(None),
      ingress_keycloak_subdomain | default(None),
      ingress_grafana_subdomain | default(None),
      ingress_prometheus_subdomain | default(None),
      ingress_alertmanager_subdomain | default(None),
      ingress_consul_subdomain | default(None),
      ingress_ara_subdomain | default(None),
    ] |
    select() |
    list
  }}

# The namespace to create Zenith services in
zenith_target_namespace: zenith-services

# The type of service to make for SSHD
zenith_sshd_service_type: LoadBalancer
# The port to use for the SSHD service
zenith_sshd_service_port: 22
# The nodePort for SSHD if using a NodePort service
zenith_sshd_service_nodeport:
# The fixed IP for a load balancer service, if using a load balancer service
# This is required when we are in HA mode
zenith_sshd_service_load_balancer_ip: >-
  {{-
    undef(hint = 'zenith_sshd_service_load_balancer_ip is required')
    if install_mode is defined and install_mode == "ha"
    else None
  }}

# The values for the release
zenith_release_defaults:
  common:
    trustBundle: "{{ zenith_trust_bundle }}"
    ingress:
      baseDomain: "{{ zenith_ingress_base_domain }}"
      annotations: "{{ zenith_ingress_annotations }}"
      tls:
        enabled: "{{ zenith_ingress_tls_enabled }}"
        secretName: "{{ zenith_ingress_tls_secret_name }}"
        annotations: "{{ zenith_ingress_tls_annotations }}"
    kubernetes:
      targetNamespace: "{{ zenith_target_namespace }}"
  sync:
    config:
      kubernetes:
        ingress:
          oidc:
            # Enable OIDC discovery
            # The identity operator will provide the secrets
            discoveryEnabled: true
            # Allow the Keycloak IDP hint to be forwarded
            # This allows us to specify Azimuth auth when redirecting from Azimuth,
            # while allowing any auth when visiting the service URL directly
            forwardedQueryParams:
              - name: kc_idp_hint
                allow:
                  - pattern: ".*"
  registrar:
    ingress:
      subdomain: "{{ zenith_ingress_registrar_subdomain }}"
    config:
      subdomainTokenSigningKey: "{{ zenith_registrar_subdomain_token_signing_key }}"
      reservedSubdomains: "{{ zenith_registrar_reserved_subdomains }}"
  sshd:
    service: >-
      {{-
        {
          "type": zenith_sshd_service_type,
          "port": zenith_sshd_service_port
        } |
          combine(
            { "nodePort": zenith_sshd_service_nodeport }
            if zenith_sshd_service_type == "NodePort" and zenith_sshd_service_nodeport
            else {}
          ) |
          combine(
            { "loadBalancerIP": zenith_sshd_service_load_balancer_ip }
            if zenith_sshd_service_type == "LoadBalancer" and zenith_sshd_service_load_balancer_ip
            else {}
          )
      }}
  # Enable the metrics by default
  metrics:
    enabled: true
zenith_release_overrides: {}
zenith_release_values: >-
  {{-
    zenith_release_defaults |
      combine(zenith_release_overrides, recursive = True)
  }}
