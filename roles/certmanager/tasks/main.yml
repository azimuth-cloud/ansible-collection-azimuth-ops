---

- name: Create cert-manager release namespace
  command: kubectl create namespace {{ certmanager_release_namespace }}
  register: certmanager_create_namespace
  changed_when: certmanager_create_namespace.rc == 0
  failed_when: >-
    certmanager_create_namespace.rc != 0 and
    'AlreadyExists' not in certmanager_create_namespace.stderr

- name: Install trust bundle
  command: kubectl apply -f -
  args:
    stdin: "{{ certmanager_trust_bundle_configmap_definition | to_nice_yaml }}"
  vars:
    certmanager_trust_bundle_configmap_definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: "{{ certmanager_trust_bundle_configmap_name }}"
        namespace: "{{ certmanager_release_namespace }}"
      data:
        ca-certificates.crt: "{{ certmanager_trust_bundle }}"
  when: certmanager_trust_bundle

- name: Install cert-manager on target Kubernetes cluster
  kubernetes.core.helm:
    chart_ref: "{{ certmanager_chart_name }}"
    chart_repo_url: "{{ certmanager_chart_repo }}"
    chart_version: "{{ certmanager_chart_version }}"
    release_namespace: "{{ certmanager_release_namespace }}"
    release_name: "{{ certmanager_release_name }}"
    release_values: "{{ certmanager_release_values }}"
    atomic: yes
    create_namespace: yes
    wait: yes
    wait_timeout: "{{ certmanager_wait_timeout }}"

- block:
    - name: Install Grafana dashboard for cert-manager metrics
      command: kubectl apply -f -
      args:
        stdin: "{{ certmanager_dashboard_definition | to_nice_yaml }}"
      vars:
        certmanager_dashboard_definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: cert-manager-grafana-dashboard
            namespace: "{{ certmanager_release_namespace }}"
            labels:
              grafana_dashboard: "1"
          data:
            certmanager_dashboard.json: |-
              {{ lookup("file", "grafana_dashboard.json") | from_json | to_nice_json }}

    - name: Configure custom alerting rules for cert-manager
      command: kubectl apply -f -
      args:
        stdin: "{{ lookup('template', 'prometheusrule.yaml.j2') }}"
  when: certmanager_monitoring_enabled

- block:
    - name: Check if EAB secret exists
      command: >-
        kubectl get secret {{ certmanager_acmehttp01issuer_eab_secret_name }}
          --namespace {{ certmanager_release_name }}
          --output json
      register: certmanager_acmehttp01issuer_eab_secret_cmd
      changed_when: false
      failed_when: >-
        certmanager_acmehttp01issuer_eab_secret_cmd.rc != 0 and
        "NotFound" not in certmanager_acmehttp01issuer_eab_secret_cmd.stderr

    - name: Set EAB credential facts from secret
      set_fact:
        certmanager_acmehttp01issuer_eab_kid: >-
          {{ (certmanager_acmehttp01issuer_eab_secret_cmd.stdout | from_json).data.kid | b64decode }}
        certmanager_acmehttp01issuer_eab_key: >-
          {{ (certmanager_acmehttp01issuer_eab_secret_cmd.stdout | from_json).data.key | b64decode }}
      when: certmanager_acmehttp01issuer_eab_secret_cmd.rc == 0

    - block:
        - name: Generate EAB credentials
          uri:
            url: "{{ certmanager_acmehttp01issuer_eab_generate_url }}"
            method: POST
          register: certmanager_acmehttp01issuer_eab_credentials

        - name: Set EAB credential facts from response
          set_fact:
            certmanager_acmehttp01issuer_eab_kid: "{{ certmanager_acmehttp01issuer_eab_credentials.json.eab_kid }}"
            certmanager_acmehttp01issuer_eab_key: "{{ certmanager_acmehttp01issuer_eab_credentials.json.eab_hmac_key }}"
      when: certmanager_acmehttp01issuer_eab_secret_cmd.rc != 0
  when: >-
    certmanager_acmehttp01issuer_enabled and
    certmanager_acmehttp01issuer_eab_required and
    not certmanager_acmehttp01issuer_eab_kid

- block:
    - name: Install ACME HTTP01 cluster issuer
      command: kubectl apply -f -
      args:
        stdin: "{{ lookup('template', 'acmehttp01issuer.yaml.j2') }}"

    - name: Set auto-TLS facts
      set_fact:
        certmanager_ingress_annotations:
          cert-manager.io/cluster-issuer: "{{ certmanager_acmehttp01issuer_name }}"
  when: certmanager_acmehttp01issuer_enabled
