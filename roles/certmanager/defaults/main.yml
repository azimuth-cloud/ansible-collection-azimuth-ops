---

# The chart to use
certmanager_chart_repo: https://charts.jetstack.io
certmanager_chart_name: cert-manager
certmanager_chart_version: v1.13.3

# Release information for the cert-manager release
certmanager_release_namespace: cert-manager
certmanager_release_name: cert-manager

# The timeout to wait for cert-manager to become ready
certmanager_wait_timeout: 10m

# The trust bundle to use in the cert-manager containers
# If empty, the default trust bundle will be used
certmanager_trust_bundle: |-
  {%- if trust_bundle is defined %}
  {%- for certificate in trust_bundle.values() %}
  {{ certificate }}
  {%- endfor %}
  {%- endif %}
certmanager_trust_bundle_configmap_name: "{{ trust_bundle_configmap_name | default('certmanager-trust-bundle') }}"

# Indicates whether the monitoring should be enabled
# In a HA setup, this should be false on the seed node
certmanager_monitoring_enabled: true

# The values for the release
certmanager_release_defaults:
  installCRDs: true
  prometheus:
    enabled: "{{ certmanager_monitoring_enabled }}"
    servicemonitor:
      enabled: "{{ certmanager_monitoring_enabled }}"
  # If using a custom trust bundle, mount the configmap over /etc/ssl/certs
  volumes: >-
    {{
      [
        {
          "name": certmanager_trust_bundle_configmap_name,
          "configMap": {
            "name": certmanager_trust_bundle_configmap_name
          }
        }
      ]
      if certmanager_trust_bundle
      else []
    }}
  volumeMounts: >-
    {{
      [
        {
          "name": certmanager_trust_bundle_configmap_name,
          "mountPath": "/etc/ssl/certs",
          "readOnly": true
        }
      ]
      if certmanager_trust_bundle
      else []
    }}
certmanager_release_overrides: {}
certmanager_release_values: >-
  {{-
    certmanager_release_defaults |
      combine(certmanager_release_overrides, recursive = True)
  }}

# Indicates if an ACME HTTP01 cluster issuer should be created
certmanager_acmehttp01issuer_enabled: yes
# The name of the issuer
certmanager_acmehttp01issuer_name: letsencrypt
# The ACME server to use
certmanager_acmehttp01issuer_server: https://acme-v02.api.letsencrypt.org/directory
# The ingress class to use for resolving HTTP01 challenges
certmanager_acmehttp01issuer_ingress_class: nginx
# Indicates whether an External Account Binding (EAB) is required
# For example, ZeroSSL requires an EAB for use with cert-manager
#Â See https://zerossl.com/documentation/acme/
certmanager_acmehttp01issuer_eab_required: no
# The secret name to use for the EAB
certmanager_acmehttp01issuer_eab_secret_name: "{{ certmanager_acmehttp01issuer_name }}-eab"
# The key ID of the EAB
certmanager_acmehttp01issuer_eab_kid:
# The HMAC key of the EAB
certmanager_acmehttp01issuer_eab_key:
# OR
# The ZeroSSL API key to use when generating new EAB credentials
certmanager_acmehttp01issuer_eab_zerossl_apikey: >-
  {{ undef(hint = 'certmanager_acmehttp01issuer_eab_zerossl_apikey is required') }}
# The URL where new EAB credentials can be obtained
certmanager_acmehttp01issuer_eab_generate_url: >-
  https://api.zerossl.com/acme/eab-credentials?access_key={{ certmanager_acmehttp01issuer_eab_zerossl_apikey }}
