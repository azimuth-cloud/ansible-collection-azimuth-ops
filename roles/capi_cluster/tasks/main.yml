---

- block:
    - name: Install or upgrade cluster
      kubernetes.core.helm:
        chart_ref: "{{ capi_cluster_chart_name }}"
        chart_repo_url: "{{ capi_cluster_chart_repo }}"
        chart_version: "{{ capi_cluster_chart_version }}"
        release_namespace: "{{ capi_cluster_release_namespace }}"
        release_name: "{{ capi_cluster_release_name }}"
        release_state: present
        release_values: "{{ capi_cluster_release_values }}"
        create_namespace: yes
      register: capi_cluster_helm_release

    # The CAPI and CAPO controllers take some time to react and update the Ready condition
    # However some kinds of update, e.g. only addons, do not affect the cluster conditions,
    # so we only allow up to two minutes for that to happen
    - name: Wait for cluster to become unready
      command: >-
        kubectl wait clusters.cluster.x-k8s.io/{{ capi_cluster_release_name }}
          --for=condition=Ready=false
          --namespace {{ capi_cluster_release_namespace }}
          --timeout 0s
      changed_when: false
      register: capi_cluster_not_ready
      until: capi_cluster_not_ready is succeeded
      retries: 12
      delay: 10
      when: capi_cluster_helm_release is changed
      ignore_errors: true

    - name: Wait for cluster to become ready
      command: >-
        kubectl wait clusters.cluster.x-k8s.io/{{ capi_cluster_release_name }}
          --for=condition=Ready
          --namespace {{ capi_cluster_release_namespace }}
          --timeout 0s
      changed_when: false
      register: capi_cluster_ready
      until: capi_cluster_ready is succeeded
      retries: 360
      delay: 10

    - name: Wait for machine deployments to be running
      command: >-
        kubectl wait machinedeployments --all
          --for=jsonpath='{.status.phase}'=Running
          --namespace {{ capi_cluster_release_namespace }}
          --timeout=0
      changed_when: false
      register: capi_cluster_mds_running
      until: capi_cluster_mds_running is succeeded
      retries: 360
      delay: 10

    - name: Wait for addons to deploy
      command: >-
        kubectl wait {{ item }} --all
          --for=jsonpath='{.status.phase}'=Deployed
          --namespace {{ capi_cluster_release_namespace }}
          --selector capi.stackhpc.com/cluster={{ capi_cluster_release_name }}
          --timeout=0
      changed_when: false
      register: capi_cluster_addons_complete
      until: capi_cluster_addons_complete is succeeded
      retries: 360
      delay: 10
      loop:
        - manifests
        - helmreleases

    - name: Generate kubeconfig for cluster
      command: >-
        kubectl get secret {{ capi_cluster_release_name }}-kubeconfig
          --namespace {{ capi_cluster_release_namespace }}
          --output jsonpath='{.data.value}'
      changed_when: false
      register: capi_cluster_kubeconfig_cmd

    - name: Write kubeconfig file for cluster
      copy:
        content: "{{ capi_cluster_kubeconfig_cmd.stdout | b64decode }}"
        dest: "{{ capi_cluster_kubeconfig_path }}"
        mode: u=rw,g=,o=
  when: capi_cluster_release_state == 'present'

- block:
    - name: Delete cluster
      kubernetes.core.helm:
        release_namespace: "{{ capi_cluster_release_namespace }}"
        release_name: "{{ capi_cluster_release_name }}"
        release_state: absent
      register: capi_cluster_helm_delete
      # There are some failure conditions that also represent the desired state
      #   * Helm is not available
      #   * The cluster is not reachable
      changed_when: capi_cluster_helm_delete.rc == 0
      failed_when: >-
        capi_cluster_helm_delete.rc != 0 and
        'Failed to find required executable' not in capi_cluster_helm_delete.stderr and
        'Kubernetes cluster unreachable' not in capi_cluster_helm_delete.stderr

    - name: Wait for cluster to be deleted
      command: >-
        kubectl wait clusters.cluster.x-k8s.io/{{ capi_cluster_release_name }}
          --for=delete
          --namespace {{ capi_cluster_release_namespace }}
          --timeout 0s
      register: capi_cluster_delete
      changed_when: false
      until: capi_cluster_delete is succeeded
      # Wait up to 60 mins for the cluster to delete
      retries: 360
      delay: 10
      # We only need to do this if the Helm delete did something
      when: capi_cluster_helm_delete is changed
  when: capi_cluster_release_state == 'absent'
