---

- name: Import community_images variable
  import_role:
    name: stackhpc.azimuth_ops.community_images
    tasks_from: export_community_images.yml
  when: community_images is not defined

- block:
    - name: Install or upgrade cluster
      kubernetes.core.helm:
        chart_ref: "{{ capi_cluster_chart_name }}"
        chart_repo_url: "{{ capi_cluster_chart_repo }}"
        chart_version: "{{ capi_cluster_chart_version }}"
        release_namespace: "{{ capi_cluster_release_namespace }}"
        release_name: "{{ capi_cluster_release_name }}"
        release_state: present
        release_values: "{{ capi_cluster_release_values }}"
        create_namespace: yes

    - name: Wait for cluster to become ready
      command: >-
        kubectl wait clusters.cluster.x-k8s.io/{{ capi_cluster_release_name }}
          --for=condition=Ready
          --namespace {{ capi_cluster_release_namespace }}
          --timeout 0s
      changed_when: false
      register: capi_cluster_ready
      until: capi_cluster_ready is succeeded
      retries: 360
      delay: 10

    - name: Wait for machine deployments to be running
      command: >-
        kubectl wait machinedeployments --all
          --for=jsonpath='{.status.phase}'=Running
          --namespace {{ capi_cluster_release_namespace }}
          --timeout=0
      changed_when: false
      register: capi_cluster_mds_running
      until: capi_cluster_mds_running is succeeded
      retries: 360
      delay: 10

    - name: Wait for addons to deploy
      command: >-
        kubectl wait {{ item }} --all
          --for=jsonpath='{.status.phase}'=Deployed
          --namespace {{ capi_cluster_release_namespace }}
          --selector capi.stackhpc.com/cluster={{ capi_cluster_release_name }}
          --timeout=0
      changed_when: false
      register: capi_cluster_addons_complete
      until: capi_cluster_addons_complete is succeeded
      retries: 360
      delay: 10
      loop:
        - manifests
        - helmreleases

    - block:
        - name: Generate kubeconfig for cluster
          command: >-
            kubectl get secret {{ capi_cluster_release_name }}-kubeconfig
              --namespace {{ capi_cluster_release_namespace }}
              --output jsonpath='{.data.value}'
          changed_when: false
          register: capi_cluster_kubeconfig_cmd

        - name: Write kubeconfig file for cluster
          copy:
            content: "{{ capi_cluster_kubeconfig_cmd.stdout | b64decode }}"
            dest: "{{ capi_cluster_kubeconfig_path }}"
            mode: u=rw,g=,o=
      when: capi_cluster_kubeconfig_path is defined
  when: capi_cluster_release_state == 'present'

- block:
    - name: Delete cluster
      kubernetes.core.helm:
        release_namespace: "{{ capi_cluster_release_namespace }}"
        release_name: "{{ capi_cluster_release_name }}"
        release_state: absent

    - name: Wait for cluster to be deleted
      command: >-
        kubectl wait clusters.cluster.x-k8s.io/{{ capi_cluster_release_name }}
          --for=delete
          --namespace {{ capi_cluster_release_namespace }}
          --timeout 0s
      changed_when: false
      register: capi_cluster_delete
      until: capi_cluster_delete is succeeded
      # Wait up to 60 mins for the cluster to delete
      retries: 360
      delay: 10
  when: capi_cluster_release_state == 'absent'
