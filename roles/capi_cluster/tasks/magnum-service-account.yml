    - name: Create namespace for a new service account
      command: kubectl create namespace {{ capi_cluster_service_account_namespace }}
      register: magnum_create_namespace
      changed_when: magnum_create_namespace.rc == 0
      failed_when: >-
        magnum_create_namespace.rc != 0 and
        'AlreadyExists' not in magnum_create_namespace.stderr

    - name: Delete service account
      command: kubectl delete sa {{ capi_cluster_service_account_name }} -n {{ capi_cluster_service_account_namespace }}
      register: magnum_delete_service_account
      changed_when: magnum_delete_service_account.rc == 0
      failed_when: >-
        magnum_delete_service_account.rc != 0 and
        'NotFound' not in magnum_delete_service_account.stderr
      when: capi_cluster_service_account_rotate_secret


    - name: Create service account
      command: kubectl apply -f -
      args:
        stdin: "{{ sa_definition | to_nice_yaml }}"
      vars:
        sa_definition:
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: "{{ capi_cluster_service_account_name }}"
            namespace: "{{ capi_cluster_service_account_namespace }}"

    - name: Create token secret for service account
      command: kubectl apply -f -
      args:
        stdin: "{{ sa_secret_definition | to_nice_yaml }}"
      vars:
        sa_secret_definition:
          apiVersion: v1
          kind: Secret
          type: kubernetes.io/service-account-token
          metadata:
            name: "{{ capi_cluster_service_account_secret_name }}"
            namespace: "{{ capi_cluster_service_account_namespace }}"
            annotations:
              kubernetes.io/service-account.name: "{{ capi_cluster_service_account_name }}"
      register: token_based_secret_applied
      until: token_based_secret_applied is succeeded
      retries: 30
      delay: 10

# Granting cluster-admin permissions via ClusterRoleBinding to allow generation of all Helm releases.
# Strict access control isnâ€™t enforced here, as the user can escalate privileges using ServiceAccounts, Roles, and RoleBindings anyway.
# which is necessary for the management cluster to operate on resources.
    - name: Create clusterrole binding of cluster-admin configuration for kubeconfig service account
      command: kubectl apply -f -
      args:
        stdin: "{{ sa_clusterrolebinding | to_nice_yaml }}"
      vars:
        sa_clusterrolebinding:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: "{{ capi_cluster_clusterrolebinding_name }}"
          subjects:
            - kind: ServiceAccount
              name: "{{ capi_cluster_service_account_name }}"
              namespace: "{{ capi_cluster_service_account_namespace }}"
          roleRef:
            kind: ClusterRole
            name: "{{ capi_cluster_service_account_role_name }}"
            apiGroup: rbac.authorization.k8s.io


    - name: Extract token for the service account
      no_log: true
      command: >-
        kubectl get secret {{ capi_cluster_service_account_secret_name }} -n {{ capi_cluster_service_account_namespace }} -o jsonpath='{.data.token}'
      register: sa_token_encoded
      changed_when: false

    - name: Decode token for service account
      no_log: true
      set_fact:
        sa_token: "{{ sa_token_encoded.stdout | b64decode }}"

    - name: Read saved kubeconfig file
      no_log: true
      slurp:
        src: "{{ capi_cluster_kubeconfig_path }}"
      register: kubeconfig_file_raw
      
    - name: Decode kubeconfig content from base64
      no_log: true
      set_fact:
        kubeconfig_content: "{{ kubeconfig_file_raw.content | b64decode | from_yaml }}"

    - name: Strip client cert/key and add token to create token-based kubeconfig
      no_log: true
      set_fact:
        modified_kubeconfig: >-
          {{
            kubeconfig_content | combine({
              "users": [
                {
                  "name": kubeconfig_content.users[0].name,
                  "user": {
                    "token": sa_token
                  }
                }
              ]
            }, recursive=True)
          }}
      

    - name: Save token-based kubeconfig to capi cluster kubeconfig path
      copy:
        content: "{{ modified_kubeconfig | to_nice_yaml }}"
        dest: "{{ capi_cluster_service_account_kubeconfig_path }}"
        mode: '0600'
      