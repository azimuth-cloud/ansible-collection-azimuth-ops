    - name: Create namespace for a new service account
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: {{ magnum_service_account_namespace }}
        state: present
      
      
    - name: Create service account for generating kubeconfig
      kubernetes.core.k8s:
        api_version: v1
        kind: ServiceAccount
        namespace: {{ magnum_service_account_namespace }}
        name: {{ magnum_service_account_name }}
        state: present
      
      
    - name: Create secret for the service account
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          type: kubernetes.io/service-account-token
          metadata:
            name: {{ magnum_service_secret_name }}
            namespace: {{ magnum_service_account_namespace }}
            annotations:
              kubernetes.io/service-account.name: {{ magnum_service_account_name }}

# Granting cluster-admin permissions via ClusterRoleBinding to allow generation of all Helm releases.
# Strict access control isnâ€™t enforced here, as the user can escalate privileges using ServiceAccounts, Roles, and RoleBindings anyway.
# which is necessary for the management cluster to operate on resources.
    - name: Create clusterrole binding of cluster-admin configuration for kubeconfig service account
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:  
            name: {{ magnum_service_clusterrolebinding_name }}
            namespace: {{ magnum_service_account_namespace }}
          subjects:
            - kind: ServiceAccount
              name: {{ magnum_service_account_name }}
              namespace: {{ magnum_service_account_namespace }}
          roleRef:
            kind: ClusterRole
            name: cluster-admin
            apiGroup: rbac.authorization.k8s.io
    
      
    - name: Extract token for the service account
      command: >-
        kubectl get secret {{ magnum_service_secret_name }} -n {{ magnum_service_account_namespace }} -o jsonpath='{.data.token}'
      register: sa_token_encoded
      changed_when: false
      delay: 10
      
    - name: Decode token for service account
      set_fact:
        sa_token: "{{ sa_token_encoded.stdout | b64decode }}"
    
      
    - name: Strip client cert/key and add token to create token-based kubeconfig
      vars:
        kubeconfig_data: "{{ capi_cluster_kubeconfig_path }}"
      set_fact:
        modified_kubeconfig: >-
          {{
            kubeconfig_data | combine({
              "users": [
                {
                  "name": kubeconfig_data.users[0].name,
                  "user": {
                    "token": sa_token
                  }
                }
              ]
            }, recursive=True)
          }}
    
      
    - name: Save token-based kubeconfig to capi cluster kubeconfig path
      copy:
        content: "{{ modified_kubeconfig | to_nice_yaml }}"
        dest: {{ magnum_service_kubeconfig_path }}
        mode: '0600'
      
