---
- name: Check status of target backup
  ansible.builtin.command: >-
    kubectl get backup {{ velero_restore_backup_name }}
      --namespace {{ velero_release_namespace }}
      --output jsonpath='{.status.phase}'
  changed_when: false
  register: velero_target_backup_check
  until: velero_target_backup_check.rc == 0
  retries: 18
  delay: 10

- name: Fail if target backup is not in an allowable state
  ansible.builtin.fail:
    msg: "Aborting restore of backup in state '{{ velero_target_backup_check.stdout }}'"
  when: >-
    velero_target_backup_check.stdout != "Completed" and
    (not velero_restore_allow_partial or velero_target_backup_check.stdout != "PartiallyFailed")

- name: Apply restore config
  ansible.builtin.command: kubectl apply -f -
  args:
    stdin: "{{ velero_restore_definition | to_nice_yaml }}"
  vars:
    velero_restore_definition:
      apiVersion: velero.io/v1
      kind: Restore
      metadata:
        name: "{{ velero_restore_name }}"
        namespace: "{{ velero_release_namespace }}"
      spec: "{{ velero_restore_spec }}"
  register: kubectl_velero_restore_conf
  changed_when: kubectl_velero_restore_conf.stdout_lines | select('match', '(?!.*unchanged$)') | length > 0

- name: Wait for restore to complete
  ansible.builtin.command: >-
    kubectl wait restores.velero.io/{{ velero_restore_name }}
      --for=jsonpath='{.status.phase}'=Completed
      --namespace {{ velero_release_namespace }}
      --timeout 0s
  changed_when: false
  register: velero_restore_complete
  until: velero_restore_complete is succeeded
  retries: 360
  delay: 10
