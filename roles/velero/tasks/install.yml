---
- name: Ensure CSI snapshot controller is installed
  kubernetes.core.helm:
    chart_ref: "{{ velero_csi_snapshot_controller_chart_name }}"
    chart_repo_url: "{{ velero_csi_snapshot_controller_chart_repo }}"
    chart_version: "{{ velero_csi_snapshot_controller_chart_version }}"
    release_namespace: "{{ velero_csi_snapshot_controller_release_namespace }}"
    release_name: "{{ velero_csi_snapshot_controller_release_name }}"
    release_values: "{{ velero_csi_snapshot_controller_release_values }}"
    atomic: true
    wait: true
    wait_timeout: "{{ velero_csi_snapshot_controller_wait_timeout }}"

- name: Install Cinder volume snapshot class
  ansible.builtin.command: kubectl apply -f -
  args:
    stdin: "{{ velero_cinder_volume_snapshot_class_definition | to_nice_yaml }}"
  vars:
    velero_cinder_volume_snapshot_class_definition:
      apiVersion: snapshot.storage.k8s.io/v1
      kind: VolumeSnapshotClass
      metadata:
        name: "{{ velero_cinder_snapshot_class_name }}"
        labels:
          velero.io/csi-volumesnapshot-class: "true"
      driver: cinder.csi.openstack.org
      deletionPolicy: Retain
      parameters:
        # Must be true to allow snapshotting in-use volumes
        force-create: "true"
  register: kubectl_velero_cinder_csi_snapshot_class
  changed_when: kubectl_velero_cinder_csi_snapshot_class.stdout_lines | select('match', '(?!.*unchanged$)') | length > 0

- name: Create Velero release namespace
  ansible.builtin.command: kubectl create namespace {{ velero_release_namespace }}
  register: velero_create_namespace
  changed_when: velero_create_namespace.rc == 0
  failed_when: >-
    velero_create_namespace.rc != 0 and
    'AlreadyExists' not in velero_create_namespace.stderr

- name: Install Velero S3 credentials secret
  ansible.builtin.command: kubectl apply -f -
  args:
    stdin: "{{ velero_s3_creds_secret_definition | to_nice_yaml }}"
  vars:
    velero_s3_creds_secret_definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ velero_s3_creds_secret_name }}"
        namespace: "{{ velero_release_namespace }}"
      stringData:
        s3-creds: |
          [default]
          aws_access_key_id = {{ velero_aws_access_key_id }}
          aws_secret_access_key = {{ velero_aws_secret_access_key }}
  register: kubectl_velero_s3_secret
  changed_when: kubectl_velero_s3_secret.stdout_lines | select('match', '(?!.*unchanged$)') | length > 0

- name: Ensure Velero is installed
  kubernetes.core.helm:
    chart_ref: "{{ velero_chart_name }}"
    chart_repo_url: "{{ velero_chart_repo }}"
    chart_version: "{{ velero_chart_version }}"
    release_namespace: "{{ velero_release_namespace }}"
    release_name: "{{ velero_release_name }}"
    release_values: "{{ velero_release_values }}"
    atomic: true
    wait: true
    wait_timeout: "{{ velero_wait_timeout }}"

- name: Install Grafana dashboard for Velero metrics
  ansible.builtin.command: kubectl apply --server-side --force-conflicts -f -
  args:
    stdin: "{{ velero_dashboard_definition | to_nice_yaml }}"
  vars:
    velero_dashboard_definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: velero-grafana-dashboard
        namespace: "{{ velero_release_namespace }}"
        labels:
          grafana_dashboard: "1"
      data:
        velero_dashboard.json: |-
          {{ lookup('file', 'grafana_dashboard.json') | from_json | to_nice_json }}
  register: kubectl_velero_dashboard
  changed_when: kubectl_velero_dashboard.stdout_lines | select('match', '(?!.*unchanged$)') | length > 0

- name: Download and extract Velero
  become: true
  block:
    - name: Ensure Velero CLI unpack directory exists
      ansible.builtin.file:
        path: "{{ velero_cli_unpack_directory }}"
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Download and extract Velero CLI archive
      ansible.builtin.unarchive:
        remote_src: true
        src: "{{ velero_cli_archive_url }}"
        dest: "{{ velero_cli_unpack_directory }}"
        extra_opts:
          - --strip-components=1
          - --show-stored-names

    - name: Ensure Velero CLI binary directory exists
      ansible.builtin.file:
        path: "{{ velero_cli_bin_directory }}"
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Copy executable to binary directory
      ansible.builtin.copy:
        remote_src: true
        src: "{{ (velero_cli_unpack_directory, 'velero') | path_join }}"
        dest: "{{ velero_cli_bin_directory }}"
        mode: u=rwx,g=rw,o=rx

- name: Ensure Velero CLI shell completions are in .bashrc
  ansible.builtin.lineinfile:
    path: "{{ ansible_env.HOME }}/.bashrc"
    line: source <(velero completion bash)
