
- name: Check if CSI snapshot controller checkout exists
  stat:
    path: ~/external-snapshotter
  register: external_snapshotter_checkout

- name: Clone CSI snapshot controller repo
  ansible.builtin.command: git clone "{{ velero_k8s_snapshot_controller_repo }}" external-snapshotter
  when: not external_snapshotter_checkout.stat.exists

- name: Ensure CSI snapshot controller is deployed
  # Adapted from https://kubernetes-csi.github.io/docs/snapshot-controller.html
  ansible.builtin.shell: |
    cd ./external-snapshotter
    git checkout "{{ velero_k8s_snapshot_controller_git_version }}"
    kubectl kustomize client/config/crd | kubectl apply -f -
    kubectl -n kube-system kustomize deploy/kubernetes/snapshot-controller | kubectl apply -f -

- name: Template Cinder VolumeSnapshotClass definition onto host
  ansible.builtin.template:
    src: cinder-csi-snapshot-class.yml.j2
    dest: /tmp/cinder-csi-snapshot-class.yml

- name: Ensure Cinder VolumeSnapshotClass is installed
  ansible.builtin.command: kubectl apply -f /tmp/cinder-csi-snapshot-class.yml

- name: Check if Velero release namespace exists
  ansible.builtin.command: kubectl get namespace "{{ velero_release_namespace }}"
  register: velero_namespace_check
  failed_when: false

- name: Create Velero release namespace
  ansible.builtin.command: kubectl create namespace "{{ velero_release_namespace }}"
  when: velero_namespace_check.rc == 1

- name: Check if Velero s3 credentials secret exists
  ansible.builtin.command: "kubectl -n {{ velero_release_namespace }} get secret {{ velero_s3_creds_secret_name }}"
  register: velero_s3_creds_check
  failed_when: false

- name: Ensure S3 credentials file is templated onto seed
  ansible.builtin.template:
    src: s3-creds.j2
    dest: /tmp/s3-creds
  when: velero_s3_creds_check.rc == 1

- name: Ensure Velero S3 credentials secret exists
  ansible.builtin.command: >-
    kubectl -n "{{ velero_release_namespace }}" create secret generic "{{ velero_s3_creds_secret_name }}"
    --from-file /tmp/s3-creds
  when: velero_s3_creds_check.rc == 1
  no_log: "{{ velero_no_log | bool }}"

- name: Ensure Velero Helm chart is installed
  kubernetes.core.helm:
    chart_ref: "{{ velero_chart_name }}"
    chart_repo_url: "{{ velero_chart_repo }}"
    chart_version: "{{ velero_chart_version }}"
    release_namespace: "{{ velero_release_namespace }}"
    release_name: "{{ velero_release_name }}"
    release_values: "{{ velero_release_values }}"
    atomic: yes
    wait: yes
    wait_timeout: "{{ velero_wait_timeout }}"

- name: Check Velero CLI version
  ansible.builtin.command: velero version --client-only
  register: velero_cli_version_check
  failed_when: false

- block:
  - name: Ensure Velero CLI is downloaded
    ansible.builtin.shell: |-
      wget "{{ velero_cli_download_url }}"
      tar -xzf "velero-v{{ velero_cli_version }}-{{ velero_cli_arch }}.tar.gz"
      
  - name: Ensure Velero CLI is in path
    ansible.builtin.command: cp velero-v{{ velero_cli_version }}-{{ velero_cli_arch }}/velero /usr/local/bin/
    become: true

  when: velero_cli_version_check.rc != 0 or velero_cli_version not in velero_cli_version_check.stdout

- name: Ensure Velero shell completions are in bashrc file
  lineinfile:
    path: "{{ ansible_env.HOME }}/.bashrc"
    line: source <(velero completion bash)
