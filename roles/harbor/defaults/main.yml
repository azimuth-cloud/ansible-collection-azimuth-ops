---

# The Harbor chart to use
harbor_chart_repo: https://helm.goharbor.io
harbor_chart_name: harbor
harbor_chart_version: 1.15.0

# Release information for the Harbor release
harbor_release_namespace: harbor
harbor_release_name: harbor

# The timeout to wait for Harbor to become ready
harbor_wait_timeout: 10m

# The Harbor admin password and secret key
harbor_admin_password: "{{ undef(hint = 'harbor_admin_password is not set') }}"
harbor_secret_key: "{{ undef(hint = 'harbor_secret_key is not set') }}"

# The base domain when the core and notary share a common parent domain
harbor_ingress_base_domain: >-
  {{
    ingress_base_domain
    if ingress_base_domain is defined
    else undef(hint = 'harbor_ingress_base_domain is required')
  }}
# The subdomain to use for the core service
harbor_ingress_subdomain_core: "{{ ingress_harbor_core_subdomain | default('registry') }}"
# The host to use for the core service
harbor_ingress_host_core: "{{ harbor_ingress_subdomain_core }}.{{ harbor_ingress_base_domain }}"
# The subdomain to use for the notary service
harbor_ingress_subdomain_notary: "{{ ingress_harbor_notary_subdomain | default('notary') }}"
# The host to use for the notary service
harbor_ingress_host_notary: "{{ harbor_ingress_subdomain_notary }}.{{ harbor_ingress_base_domain }}"

# At the time of writing, the Harbor chart doesn't support setting the ingress class
# So we have to do it via the annotation
_harbor_ingress_annotations:
  kubernetes.io/ingress.class: "nginx"
# Annotations to use for the ingress resources
harbor_ingress_annotations: "{{ _harbor_ingress_annotations | combine(ingress_annotations | default({})) }}"

# Indicates if TLS should be enabled
harbor_tls_enabled: "{{ ingress_tls_enabled | default(True) }}"

# The scheme for the Harbor external URL
harbor_external_url_scheme: "{{ 'https' if harbor_tls_enabled else 'http' }}"
# The external URL for Harbor
harbor_external_url: "{{ harbor_external_url_scheme }}://{{ harbor_ingress_host_core }}"

# A pre-existing wildcard certificate and key
harbor_tls_wildcard_certificate: "{{ ingress_tls_wildcard_certificate | default(None) }}"
harbor_tls_wildcard_key: >-
  {{
    ingress_tls_wildcard_key
    if ingress_tls_wildcard_key is defined
    else undef(hint = 'harbor_tls_wildcard_key is required')
  }}
# Or separate certificates and keys for core and notary
harbor_tls_core_certificate:
harbor_tls_core_key: "{{ undef(hint = 'harbor_tls_core_key is required') }}"
harbor_tls_notary_certificate: "{{ undef(hint = 'harbor_tls_notary_certificate is required') }}"
harbor_tls_notary_key: "{{ undef(hint = 'harbor_tls_notary_key is required') }}"

# TLS-related annotations, e.g. for cert-manager
# If used with the cert-manager role, the annotations set by that role will be picked up
harbor_tls_ingress_annotations: "{{ ingress_tls_annotations | default({}) }}"

# The name of the secret containing the wildcard certificate
harbor_tls_secret_name: harbor-tls
# The name of the secret containing the TLS certificate for the core service
harbor_tls_core_secret_name: >-
  {{-
    harbor_tls_secret_name
    if harbor_tls_wildcard_certificate
    else 'harbor-tls-core'
  }}
# The name of the secret containing the TLS certificate for the notary service
harbor_tls_notary_secret_name: >-
  {{-
    harbor_tls_secret_name
    if harbor_tls_wildcard_certificate
    else 'harbor-tls-notary'
  }}

# The default storage class on most platforms is RWO, so use Recreate here
harbor_update_strategy: Recreate

# Settings for persistence
harbor_persistence_enabled: yes
harbor_persistence_image_chart_storage_type: filesystem
harbor_persistence_pvc_chartmuseum_size: 5Gi
harbor_persistence_pvc_database_size: 1Gi
harbor_persistence_pvc_jobservice_size: 1Gi
harbor_persistence_pvc_jobservice_joblog_size: "{{ harbor_persistence_pvc_jobservice_size }}"
harbor_persistence_pvc_jobservice_scandataexports_size: "{{ harbor_persistence_pvc_jobservice_size }}"
harbor_persistence_pvc_redis_size: 1Gi
harbor_persistence_pvc_registry_size: 5Gi
harbor_persistence_pvc_trivy_size: 5Gi

# The values for the Harbor release
harbor_release_defaults:
  externalURL: "{{ harbor_external_url }}"
  harborAdminPassword: "{{ harbor_admin_password }}"
  secretKey: "{{ harbor_secret_key }}"
  updateStrategy:
    type: "{{ harbor_update_strategy }}"
  expose:
    type: ingress
    ingress:
      hosts:
        core: "{{ harbor_ingress_host_core }}"
        notary: "{{ harbor_ingress_host_notary }}"
      annotations: >-
        {{-
          (harbor_ingress_annotations | combine(harbor_tls_ingress_annotations))
          if harbor_tls_enabled and not harbor_tls_wildcard_certificate
          else harbor_ingress_annotations
        }}
    tls:
      enabled: "{{ harbor_tls_enabled }}"
      certSource: secret
      secret:
        secretName: "{{ harbor_tls_core_secret_name }}"
        notarySecretName: "{{ harbor_tls_notary_secret_name }}"
  persistence:
    enabled: "{{ harbor_persistence_enabled }}"
    imageChartStorage:
      type: "{{ harbor_persistence_image_chart_storage_type }}"
    persistentVolumeClaim:
      chartmuseum:
        size: "{{ harbor_persistence_pvc_chartmuseum_size }}"
      database:
        size: "{{ harbor_persistence_pvc_database_size }}"
      jobservice:
        jobLog:
          size: "{{ harbor_persistence_pvc_jobservice_joblog_size }}"
        scanDataExports:
          size: "{{ harbor_persistence_pvc_jobservice_scandataexports_size }}"
      redis:
        size: "{{ harbor_persistence_pvc_redis_size }}"
      registry:
        size: "{{ harbor_persistence_pvc_registry_size }}"
      trivy:
        size: "{{ harbor_persistence_pvc_trivy_size }}"
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
harbor_release_overrides: {}
harbor_release_values: >-
  {{-
    harbor_release_defaults |
      combine(harbor_release_overrides, recursive = True)
  }}

# Path to a CA file to use when talking to the Harbor API
harbor_ca_path:
# Whether or not to validate SSL certificates when talking to the Harbor API
harbor_validate_certs: yes

# The proxy cache projects to create
harbor_proxy_cache_projects: {}
  # docker.io:
  #   name: dockerhub-public
  #   type: docker-hub
  #   url: https://hub.docker.com
