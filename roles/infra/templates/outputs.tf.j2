output "cluster_ssh_private_key" {
  description = "The generated private key for the cluster"
  value       = openstack_compute_keypair_v2.keypair_deploy.private_key
  sensitive   = true
}

output "cluster_gateway_ip" {
  description = "The IP address of the gateway used to contact the cluster nodes"
{% if infra_provisioning_network_id %}
  value = openstack_networking_port_v2.port_provisioning.all_fixed_ips[0]
{% elif infra_fixed_floatingip %}
  value = "{{ infra_fixed_floatingip }}"
{% else %}
  value = openstack_networking_floatingip_v2.fip.address
{% endif %}
}

output "cluster_nodes" {
  description = "A list of the nodes in the cluster from which an Ansible inventory will be populated"
  value       = concat(
    [
      {
        name   = openstack_compute_instance_v2.node.name
        ip     = openstack_networking_port_v2.port_internal.all_fixed_ips[0]
        groups = [
{% for group in infra_ansible_groups %}
          "{{ group }}"{% if not loop.last %},{% endif %}
{% endfor %}
        ]
        facts  = {
          k3s_storage_device = openstack_compute_volume_attach_v2.data_volume_attach.device

          # Set the gateway IP as a fact that can be consumed
{% if not infra_provisioning_network_id %}
{% if infra_fixed_floatingip %}
          infra_external_ip = "{{ infra_fixed_floatingip }}"
{% else %}
          infra_external_ip = openstack_networking_floatingip_v2.fip.address
{% endif %}
{% endif %}

          # Include the network id of the provisioned network as a variable for provisioned hosts
          # This allows clusters to be placed onto the same network by referencing this
{% if infra_network_id %}
          infra_network_id = "{{ infra_network_id }}"
{% else %}
          infra_network_id = openstack_networking_network_v2.internal_net.id
{% endif %}

          # Also include the keypair name for the same reason
          infra_deploy_keypair = openstack_compute_keypair_v2.keypair_deploy.name
        }
      }
    ]
  )
}
