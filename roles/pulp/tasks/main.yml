---

- name: Create Pulp release namespace
  command: kubectl create namespace {{ pulp_release_namespace }}
  register: pulp_create_namespace
  changed_when: pulp_create_namespace.rc == 0
  failed_when: >-
    pulp_create_namespace.rc != 0 and
    'AlreadyExists' not in pulp_create_namespace.stderr

- name: Install Pulp operator on target Kubernetes cluster
  kubernetes.core.helm:
    chart_ref: "{{ pulp_operator_chart_name }}"
    chart_repo_url: "{{ pulp_operator_chart_repo }}"
    chart_version: "{{ pulp_operator_chart_version }}"
    release_namespace: "{{ pulp_release_namespace }}"
    release_name: "{{ pulp_release_name }}"
    release_values: "{{ pulp_operator_release_values }}"
    atomic: yes
    create_namespace: yes
    wait: yes
    wait_timeout: "{{ pulp_operator_wait_timeout }}"

- name: Wait for Pulp operator to be come ready
  command: >-
    kubectl rollout status
      --namespace {{ watch.namespace }}
      --timeout 1s
      {{ watch.kind }}/{{ watch.name }}
  changed_when: false
  register: pulp_operator_wait
  until: pulp_operator_wait is succeeded
  retries: 60
  delay: 10
  loop: "{{ pulp_operator_watches }}"
  loop_control:
    loop_var: watch
    label: "{{ watch.namespace }}/{{ watch.kind }}/{{ watch.name }}"

- name: Deploy internal database for Pulp
  include_role:
    name: azimuth_cloud.azimuth_ops.postgres_operator
    tasks_from: database.yml
    defaults_from: database.yml
  vars:
    pgo_database_name: "{{ pulp_database_name }}"
    pgo_database_namespace: "{{ pulp_release_namespace }}"
    pgo_database_data_volume_storage_class: "{{ pulp_database_data_volume_storage_class }}"
    pgo_database_backup_volume_storage_class: "{{ pulp_database_backup_volume_storage_class }}"
    pgo_database_data_volume_size: "{{ pulp_database_data_volume_size }}"
    pgo_database_backup_volume_size: "{{ pulp_database_backup_volume_size }}"

- name: Extract Postgres database secret
  command: "kubectl get secret -n {{ pulp_release_namespace }} {{ pulp_database_name }}-pguser-{{ pulp_database_name }} -o json"
  register: pulp_db_pguser_secret_raw

- name: Set fact Postgres database secret
  set_fact:
    pulp_db_pguser_secret_data: "{{ (pulp_db_pguser_secret_raw.stdout | from_json).data }}"

- name: Create Pulp database secret
  command: kubectl apply -f -
  args:
    stdin: "{{ pulp_db_secret_definition | to_nice_yaml }}"
  vars:
    pulp_db_secret_definition: 
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ pulp_release_name }}-postgresql-auth"
        namespace: "{{ pulp_release_namespace }}"
        labels: "{{ pulp_labels }}"
      type: generic
      stringData:
        POSTGRES_HOST: "{{ pulp_db_pguser_secret_data.host | b64decode }}"
        POSTGRES_PORT: "{{ pulp_db_pguser_secret_data.port | b64decode }}"
        POSTGRES_USERNAME: "{{ pulp_db_pguser_secret_data.user | b64decode }}"
        POSTGRES_PASSWORD: "{{ pulp_db_pguser_secret_data.password | b64decode }}"
        POSTGRES_DB_NAME: "{{ pulp_database_name }}"
        POSTGRES_SSLMODE: "prefer"

- name: Install Pulp ingress
  # https://github.com/pulp/pulp-operator/tree/main/docs/configuring/networking
  # TODO: lock this down to only portal_internal, see infra_network_cidr and infra_network_id
  # actually I suspect the latter is always set by the infra role, so we shoud be OK?
  command: kubectl apply -f -
  args:
    stdin: "{{ pulp_ingress_definition | to_nice_yaml }}"
  register: _pulp_install_pulp_ingress
  changed_when: "'unchanged' not in _pulp_install_pulp_ingress.stdout"
  vars:
    pulp_ingress_definition:
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: "{{ pulp_ingress_name }}"
        namespace: "{{ pulp_release_namespace }}"
        labels: "{{ pulp_labels }}"
        annotations: "{{ pulp_ingress_annotations }}"
      spec: "{{ pulp_ingress_spec }}"

- name: Install Pulp
  # See https://github.com/pulp/pulp-operator/tree/main/config/samples
  # See https://pulpproject.org/pulp-oci-images/docs/admin/reference/available-images/single-process-images/
  # for info on the containers which are deployed
  command: kubectl apply -f -
  args:
    stdin: "{{ pulp_cr_definition | to_nice_yaml }}"
  register: _pulp_install_pulp_server
  changed_when: "'unchanged' not in _pulp_install_pulp_server.stdout"
  vars:
    pulp_cr_definition:
      apiVersion: repo-manager.pulpproject.org/v1beta2
      kind: Pulp
      metadata:
        name: pulp
        namespace: "{{ pulp_release_namespace }}"
      spec:
        image_version: "{{ pulp_image_version }}"
        image_web_version: "{{ pulp_image_web_version }}"
        image: "{{ pulp_image }}"
        api: # TODO: make these controllable
          replicas: 2
          strategy:
            type: Recreate # TODO: see below b/c RWO storage
        content:
          replicas: 2
          strategy:
            type: Recreate # TODO: see below b/c RWO storage
        worker:
          replicas: 3
          strategy:
            type: Recreate # TODO: see below b/c RWO storage
        database:
          external_db_secret: "{{ pulp_release_name }}-postgresql-auth"
        cache:
          enabled: false
        # https://github.com/pulp/pulp-operator/blob/main/docs/configuring/storage.md#configuring-pulp-operator-storage-to-use-a-storage-class
        # TODO: how do we set these, really?
        # or should we use e.g. s3?
        file_storage_storage_class: local-path
        file_storage_size: "2Gi"
        file_storage_access_mode: "ReadWriteOnce"
        pulp_settings:
          api_root: "/pulp/"
          allowed_export_paths:
            - /tmp
          allowed_import_paths:
            - /tmp
          content_origin: "{{ pulp_external_url_base }}"
          ansible_api_hostname: "{{ pulp_external_url_base }}"
          token_server: "{{ pulp_external_url_base }}/token" # maybe??
          csrf_trusted_origins: ["{{ pulp_external_url_base }}"]

- name: Wait for Pulp to become ready
  # Might need to use the service instead of the ingress if we lock down
  # ingress
  uri:
    url: "{{ pulp_external_url_content }}"
    method: GET
    timeout: 5
  register: pulp_content_available
  until: pulp_content_available is succeeded
  retries: 60
  delay: 10

# TODO: we need to inject the Ingress (e.g.pulp.apps.45-135-58-216.sslip.io)
# not the service for the VMs. For the container, the service is fine/better
# as it'll avoid any CIDR limitations
