---

- name: Install or upgrade cluster
  kubernetes.core.helm:
    chart_ref: "{{ cluster.chart_name }}"
    chart_repo_url: "{{ capi_helm_repo_url }}"
    chart_version: "{{ cluster.chart_version }}"
    create_namespace: yes
    release_name: "{{ cluster.release_name }}"
    release_namespace: "{{ cluster.release_namespace | default('default') }}"
    release_state: "{{ cluster.release_state | default(cluster_state_default) }}"
    release_values: "{{ cluster.release_values | default({}) }}"
  register: cluster_helm_release

- block:
    - name: Wait for cluster to become ready
      command: >-
        kubectl get cluster {{ cluster.release_name }}
          -n {{ cluster.release_namespace | default('default') }}
          -o jsonpath='{.status.conditions[?(@.type == "Ready")].status}'
      changed_when: false
      register: cluster_ready_cmd
      until: cluster_ready_cmd.stdout == "True"
      # Wait up to 60 mins for the cluster to become ready
      retries: 360
      delay: 10

    - name: Wait for addons to deploy
      command: >-
        kubectl wait jobs --all \
          -l app.kubernetes.io/name=addons,app.kubernetes.io/instance={{ cluster.release_name }}
          -n {{ cluster.release_namespace | default('default') }} \
          --for=condition=Complete
          --timeout=0
      changed_when: false
      register: cluster_addons_complete_cmd
      until: cluster_addons_complete_cmd.rc == 0
      # Wait up to 60 mins for the addons to deploy
      retries: 360
      delay: 10
  when: (cluster.release_state | default(cluster_state_default)) == "present"

- name: Wait for cluster to be deleted
  command: >-
    kubectl get cluster {{ cluster.release_name }}
      -n {{ cluster.release_namespace | default('default') }}
  register: cluster_fetch_cmd
  changed_when: false
  failed_when: "cluster_fetch_cmd.rc != 0 and 'NotFound' not in cluster_fetch_cmd.stderr"
  until: "'NotFound' in cluster_fetch_cmd.stderr"
  # Wait up to 60 mins for the cluster to delete
  retries: 360
  delay: 10
  when: (cluster.release_state | default(cluster_state_default)) == "absent"
